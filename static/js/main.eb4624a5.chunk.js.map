{"version":3,"sources":["Component/Fullpage.js","Component/Downicon.js","sections/section1.js","sections/section2.js","Component/Skillcard.js","sections/section3.js","App.js","serviceWorker.js","index.js"],"names":["Fullpage","props","ChangeBackgroundColor","setState","backgroundColor","state","children","this","className","style","onClick","src","data","Icons","Color","Component","Downicon","display","flexDirection","alignItems","justifyContent","marginBottom","transform","maxWidth","TitlesAndIcons","ChangeColor","color","bind","to","spy","smooth","duration","onMouseOver","onMouseLeave","title","subtitle","Object","keys","links","map","key","url","down","name","Aboutsection","sections","content","scrollTo","Skillcard","skill","Content","Image","Skillssection","items","eachskill","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb4624a5.chunk.js","sourcesContent":["import React ,{Component} from 'react';\r\nimport './Fullpage.css';\r\nimport SnowStorm from 'react-snowstorm';\r\nimport data from \"../data.json\";\r\n\r\nclass Fullpage extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n    ChangeBackgroundColor = () => {\r\n        this.setState({\r\n            backgroundColor: this.state.backgroundColor === \"red\" ? \"yellow\" : \"red\",\r\n        });\r\n      };\r\n    render(){\r\n        const {children}=this.props\r\n        return(\r\n             <div className={`fullpage ${this.props.className || ''}`}\r\n              style={{backgroundColor:this.state.backgroundColor}}\r\n             >\r\n                 <SnowStorm />\r\n                 <div className=\"Button3\"\r\n            onClick={()=>{\r\n              this. ChangeBackgroundColor ();\r\n            }}\r\n            > <img src={data.Icons.Color}/></div>\r\n                 {children}\r\n             </div>\r\n        )\r\n    }\r\n}\r\nexport default Fullpage;\r\n                     ","import React , {Component} from \"react\";\r\nimport { tsPropertySignature } from \"@babel/types\";\r\n\r\n\r\nconst Downicon =(props)=>{\r\n   return(\r\n    <div\r\n    onClick={props.onClick}\r\n    style={{\r\n     \r\n      display: \"flex\",\r\n      flexDirection: \"row\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      marginBottom: \"-34px\",\r\n      transform: \"translateY(-45px)\"\r\n    }}\r\n  >\r\n    <div style={{maxWidth:\"30px\"}}>\r\n      <img src={props.Icons} />\r\n    </div>\r\n  </div>\r\n   )\r\n}\r\nexport default  Downicon;\r\n","import React, { Component } from \"react\";\r\nimport { directive } from \"@babel/types\";\r\nimport Fullpage from \"../Component/Fullpage\";\r\nimport data from \"../data.json\";\r\nimport { SocialIcon } from \"react-social-icons\";\r\nimport Downicon from \"../Component/Downicon\";\r\nimport { Link, Element } from \"react-scroll\";\r\n\r\nimport \"./section1.css\";\r\n\r\nclass TitlesAndIcons extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      color: \"black\",\r\n    };\r\n    this.ChangeColor = this.ChangeColor.bind(this);\r\n  }\r\n\r\n  ChangeColor = () => {\r\n    this.setState({\r\n      color: this.state.color === \"black\" ? \"white\" : \"black\",\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Fullpage className=\"first\">\r\n          <Link\r\n            className=\"test6\"\r\n            to=\"About\"\r\n            spy={true}\r\n            smooth={true}\r\n            duration={500}\r\n          >\r\n            <div className=\"Button1\"  style={{ color: this.state.color }}>About Me!</div>\r\n          </Link>\r\n          <Link\r\n            className=\"test6\"\r\n            to=\"Skill\"\r\n            spy={true}\r\n            smooth={true}\r\n            duration={500}\r\n          >\r\n            <div className=\"Button2\"  style={{ color: this.state.color }}>My skills</div>\r\n          </Link>\r\n          \r\n          <h1\r\n            className=\"title\"\r\n            style={{ color: this.state.color }}\r\n            onMouseOver={() => {\r\n              this.ChangeColor();\r\n            }}\r\n            onMouseLeave={() => {\r\n              this.ChangeColor();\r\n            }}\r\n          >\r\n            {data.title}\r\n          </h1>\r\n          <div>\r\n            <h2  style={{ color: this.state.color }}>{data.subtitle}</h2>\r\n          </div>\r\n          <div>\r\n            {Object.keys(data.links).map(key => {\r\n              return <SocialIcon url={data.links[key]} />;\r\n            })}\r\n          </div>\r\n        </Fullpage>\r\n        <Link\r\n          className=\"test6\"\r\n          to=\"About\"\r\n          spy={true}\r\n          smooth={true}\r\n          duration={500}\r\n        >\r\n          <Downicon Icons={data.Icons.down} />\r\n        </Link>\r\n\r\n        <Element name=\"About\" className=\"element\"></Element>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default TitlesAndIcons;\r\n","import React, { Component } from \"react\";\r\nimport { directive } from \"@babel/types\";\r\nimport Fullpage from \"../Component/Fullpage\";\r\nimport data from \"../data.json\";\r\nimport \"./section2.css\";\r\nimport Downicon from \"../Component/Downicon\";\r\nimport { Link, Element } from \"react-scroll\";\r\nimport { Duplex } from \"stream\";\r\n\r\nclass Aboutsection extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Fullpage className=\"second\">\r\n          <h3 className=\"h3\">{data.sections[0].title}</h3>\r\n          <div className=\"content\">{data.sections[0].content}</div>\r\n        </Fullpage>\r\n        <Link\r\n          className=\"test6\"\r\n          to=\"Skill\"\r\n          spy={true}\r\n          smooth={true}\r\n          duration={500}\r\n        >\r\n          <Downicon Icons={data.Icons.down} onClick={this.scrollTo} />\r\n        </Link>\r\n\r\n        <Element name=\"Skill\" className=\"element\"></Element>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Aboutsection;\r\n","import React ,{Component} from 'react';\r\nimport { directive } from '@babel/types';\r\n\r\n\r\n\r\n\r\nclass Skillcard extends Component{\r\n    render(){\r\n        const {skill}=this.props;\r\n        return(\r\n            <div className=\"card\" >\r\n            <div className=\"image-wrapper\">\r\n                <img src={skill.Content.Image}/>\r\n            </div>\r\n            <div className=\"skill-title-wrapper\" >\r\n                <h4>{skill.Content.title}</h4>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default Skillcard ;\r\n                     ","import React, { Component } from \"react\";\r\nimport Fullpage from \"../Component/Fullpage\";\r\nimport data from \"../data.json\";\r\nimport Skillcard from \"../Component/Skillcard\";\r\nimport \"./section3.css\";\r\n\r\nclass Skillssection extends Component {\r\n  render() {\r\n    return (\r\n      <Fullpage className=\"third\">\r\n        <h3 className=\"h3\">{data.sections[1].title}</h3>\r\n        <div className=\"cards-wrapper\">\r\n         {data.sections[1].items.map(eachskill => {\r\n              return <Skillcard skill={eachskill} />;\r\n            })}\r\n        </div>\r\n      </Fullpage>\r\n    );\r\n  }\r\n}\r\nexport default Skillssection;\r\n","import React from \"react\";\r\n\r\nimport  TitlesAndIcons from \"./sections/section1\";\r\nimport Aboutsection from \"./sections/section2\";\r\nimport Skillssection from \"./sections/section3\";\r\n\r\nimport \"./App.css\";\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"Navigation\"></div>\r\n        <TitlesAndIcons/>\r\n        <Aboutsection/>\r\n        <Skillssection/>\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}